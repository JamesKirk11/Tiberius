##################################################################################################
#### The master input file used by gppm_fit.py, pm_fit.py, plot_output.py and generate_LDCS.py #####
##################################################################################################


### INPUT FILES

# Critical inputs
time_file =  time.pickle # a path that points to a pickled numpy array of times.
flux_file =	 WL_flux.pickle #  a path that points to a pickled numpy array of fluxes. If this is for a white light curve it should have shape (1,). Otherwise for wavelength-binned fits, it should have shape = (nbins,nfluxes)
error_file = WL_err.pickle #  a path that points to a pickled numpy array of fluxes. If this is for a white light curve it should have shape (1,). Otherwise for wavelength-binned fits, it should have shape = (nbins,nfluxes)

# Ancillary inputs for detrending
model_input_files = time.pickle # paths that point to an arbitrary number of pickled arrays of detrending inputs. Each path needs to be separated by a comma, e.g.: "time.pickle,background.pickle,x.pickle,..."


### SYSTEM PARAMETERS

white_light_fit =  1	# define whether we're fitting a white light curve or not. This determines whether inclination, a/Rs and t0 are fixed or fitted for. Set to 1 (on) or 0 (off).

period =	2.7347703	# the orbital period of the planet in days.
period_prior = fixed # the prior to be placed on the period, if a fit parameter. If period is fixed, set this to 'fixed'. If this is set to a float, then the float defines the std dev of a Gaussian prior, with the mean set by the above 'period' parameter.

inclination = 83.8397 # the inclination of the planet's orbit in degrees. If this is a white light curve fit, this parameter is fitted for otherwise it is held fixed.
inclination_prior =  fixed	# the prior to be placed on the inclination, if a fit parameter. If inclination is fixed, set this to 'fixed'. If left blank, a wide uniform prior is used. If inclination is fixed, set this to 'fixed'. If this is set to a float, then the float defines the std dev of a Gaussian prior, with the mean set by the above 'inclination' parameter.

aRs =   	5.5574		# the a/Rs of the system. If this is a white light curve fit, this parameter is fitted for otherwise it is held fixed.
aRs_prior =  	fixed		# the prior to be placed on the a/Rs, if a fit parameter. If a/Rs is fixed, set this to 'fixed'. If left blank, a wide uniform prior is used. If a/Rs is fixed, set this to 'fixed'. If this is set to a float, then the float defines the std dev of a Gaussian prior, with the mean set by the above 'aRs' parameter.

k =  0.0896		# the Rp/Rs of the system. This is just a starting value and is always fitted for.
k_prior = 	0.01		# the prior to be placed on the Rp/Rs. If left blank, a wide uniform prior is used. If this is set to a float, then the float defines the std dev of a Gaussian prior, with the mean set by the above 'k' parameter.

ecc = 0
ecc_prior = fixed # the prior to be placed on the orbital eccentricity. If eccentricity is fixed, set this to 'fixed'. If left blank, a wide uniform prior is used. If this is set to a float, then the float defines the std dev of a Gaussian prior, with the mean set by the above 'ecc' parameter.

omega = 90
omega_prior = fixed # the prior to be placed on the longitude of periastron. If longitude of periastron is fixed, set this to 'fixed'. If left blank, a wide uniform prior is used. If this is set to a float, then the float defines the std dev of a Gaussian prior, with the mean set by the above 'ecc' parameter.


t0 =		60363.89585540111	# the time of mid transit in days. If this is a white light curve fit, this parameter is fitted for otherwise it is held fixed.
t0_prior = 0.0005 # the prior to be placed on the time of mid transit in days, if a fit parameter. If t0 is fixed, set this to 'fixed'. If left blank, a wide uniform prior is used. If this is set to a float, then the float defines the std dev of a Gaussian prior, with the mean set by the above 't0' parameter.

contact1 = 	1500	# position of the first contact point in frame numbers. Used to define the out of transit data, if wanting to optimise GP hyperparams to out of transit data and/or renormalising flux to out-of-transit data.
contact4 = 	3800	# position of the fourth contact point in frame numbers. Used to define the out of transit data, if wanting to optimise GP hyperparams to out of transit data and/or renormalising flux to out-of-transit data.

first_integration = 0 # this allows you to clip the first N integrations from your light curves. This uses Python indexing.
last_integration = -1 # this allows you to clip the last N integrations from your light curves. This uses Python indexing.

### PLANET PARAMETERS, NEEDED TO CALCULATE SCALE HEIGHT FOR TRANSMISSION SPECTRUM IN plot_output.py

rp = 0.19	# planet's radius in Jupiter radii
rs = 0.52	# star's radius in solar radii
logg =  # logg of the planet OR can define:
g = 	# surface gravity of planet (in m/s^2)
Teq = 700 # equilibrium temperature of planet in K



### LIMB DARKENING; including whether we want priors and the parameters of the host star

wvl_centres = 	3.289860# either a single number (in case of white light curve) OR a pickled numpy array of wavlength bin centres. This is used by generate_generate_LDCS.py
wvl_bin_full_width = 0.854767 	# either a single number (in case of white light curve) OR a pickled numpy array of wavlength bin centres. This is used by generate_generate_LDCS.py. This is the FULL WIDTH of the bin NOT the width/2.


ld_prior = 0 	# Do we want to place Gaussian priors on the limb darkening coefficients? Set to 1 (on) or 0 (off).
ld_law = quadratic # choose between linear/quadratic/squareroot/nonlinear/
fix_u1 = 0 		# Do we want to fix the first ld coefficient? Set to 1 (on) or 0 (off).
fix_u2 = 1		# Do we want to fix the second ld coefficient? Set to 1 (on) or 0 (off).
fix_u3 =  0		# Do we want to fix the first ld coefficient? Set to 1 (on) or 0 (off).
fix_u4 = 0		# Do we want to fix the second ld coefficient? Set to 1 (on) or 0 (off).
ld_uncertainty_multiplier = 3 	# If wanting to inflate the error bars on the LDCs, set this to a factor. e.g. setting to 3, inflates errors by a factor of 3.
use_kipping_parameterisation = 0	# Use if wanting to use Kipping's change of variables for efficient sampling of LDCs. NOTE: NOT FULLY TESTED. Set to 1 (on) or 0 (off).


# Stellar parameters, for limb darkening coefficients

Teff = 	6768		# Stellar effective temperature in K
Teff_err = 	100	# Error in stellar effective temperature, in K
logg_star = 4.14	# log(g) of star
logg_star_err = 0.03 # error in  log(g) of star
FeH = 	0.139		# Fe/H of star
FeH_err = 	0.12	# error in Fe/H of star
stellar_rotation_period = 25 # in days, only needed for stellar spot modelling

# Spot parameters for spot modelling with fleck
inc_stellar = 90 # in degrees
spot_radius = 0.1 # in stellar radii percentage?
spot_lat = -40 # in degrees
spot_lon = 20 # in degrees
spot_contrast = 0.7 # percentage of flux
spot_fitting = 0,1,1,1,1 # which parameters to fit for, leave empty to not run a spot model


### MCMC PARAMETERS, used by gp_fit.py AND pm_fit.py

nwalkers =	50	# number of emcee walkers. Must be an even integer.
nsteps =  500 		# number of emcee steps. Note, set this to "auto" if wanting to let the autocorrelation length automatically determine the length of the chains. Note: these will never run over 20,000 steps even it autocorrelation is not satisfied. ***Set to 0 if wanting to perform a Levernberg-Marquadt fit with no MCMC!***
nthreads = 	4	# number of threads. NOTE: sometimes multi-threading conks out.
prod_only = 0   # do you want to run a single MCMC run all the way through (1) or break this up into an initial chain, followed by a 'production' chain (0). The latter is the default and is necessary if not using a GP so that the photometric uncertainties can be rescaled

common_noise_model = 	# a path to a pickled common noise model. Leave blank if not wanting to perform a common mode correction
clip_outliers = 1		# do you want to clip outliers before fitting? Set to 1 (on) or 0 (off).
sigma_cut =  4           # choose the sigma cut level (e.g. 3 sigma, 4 sigma) can be a float
median_clip = 0      # define whether you want to clip the outliers using a running median (1) or using a transit light curve fit (0). Currently only implemented for TransitModelGPPM

rebin_data = 	# can choose to bin the data for purposes of plotting. set this number to number of bins desired. Can be left blank.

normalise_inputs = 1	# do we want to normalise the ancillary data? This is done through (input - mean(input))/std(input).  Set to 1 (on) or 0 (off).

renorm_flux = 0 # do we want to renormalise the flux to give an out of transit median of unity? Set to 1 (on) or 0 (off).

save_chain = 0 # do we want to save the chains to text files: yes (1) or no (0). If yes, this can take up a lot of storage

optimise_model = 	1		# optimise the model parameters using a Nelder-Mead algorithm before starting the MCMC? Set to 1 (on) or 0 (off).


## FOR PARAMETRIC MODELLING

polynomial_orders = 	1	 	# What order polynomials are being used to model the systematic model inputs? Can be left blank if not using a polynomial. Note the inputs are those defined in the above 'model_input_files' and so must have the same length. e.g. for 3 model input files, you could set polynomial_orders to 0,1,2 (which would be 0th order/ignored first model input, 1st order poly to second input, 2nd order poly to 3rd input)
polynomial_coefficients = 		# starting positions of polynomial coefficients. Can be left blank, in which case the code makes a guess.
exponential_ramp = 0 # do you want to use an exponential ramp in your fitting? If yes, set this to an integer >= 1, where the number sets the number of exponentials to use. If not wanting to use an exponential ramp, keep this as 0.

## FOR GP MODELLING

kernel_classes = 				# A list of kernel classes that we want to use, e.g. "ExpSquared,Matern32,..." If we don't want to use a GP (and only polynomials), leave this blank. This needs to be as long as the number of 'model_input_files'
white_noise_kernel = 1			# Use white noise kernel (1) or not (0)
typeII_maximum_likelihood = 0	# run typeII maximum likelihood? i.e. hold GP hyperparameters fixed to optimized values and run MCMC over mean model parameters. Set to 1 (on) or 0 (off).


max_A_multiplier = 100   # the upper bound on the amplitude of the GP, defined as this number multiplied by the out-of-transit variance in the data
min_A_multiplier = 0.01  # the lower bound on the amplitude of the GP, defined as this number multiplied by the out-of-transit variance in the data

dy_max_multiplier = 3  # the upper bound on the GP lengthscale defined per model_input_parameter, defined as this number X the maximum distance between data points
dy_min_multiplier = 1  # the lower bound on the GP lengthscale defined per model_input_parameter, defined as this number X the median distance between data points

min_WN_sigma = 1e-7   # the lower bound on the white noise std dev
max_WN_sigma = 1000e6  # the upper bound on the white noise std dev

reset_kernel_priors = 0 # a boolean that allows you to reset the priors on the kernel hyperparameters using the results from the optimisation to the out of transit data. If true (=1), then the new kernel priors will be uniform between 0.9 and 1.1X the optimised values.

## Plotting

show_plots = 1 # Do you want to plot intermediate plots of the fit outputs? Set to 1 (on) or 0 (off).

